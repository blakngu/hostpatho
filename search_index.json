[["análisis-estadístico-de-datos-genómicos.html", "Capítulo 1 Análisis estadístico de datos genómicos 1.1 Genómica composicional", " Capítulo 1 Análisis estadístico de datos genómicos #################################################################### # BIOINFORMATICA I: GENOMICA COMPARATIVA # Vamos a ver la solución de alguna de las preguntas establecidas en # la clase anterior. # Todo el material teórico correspondiente está en la clase anterior. # Primero vamos a cargar las dos bibliotecas que vamos a usar: # #################################################################### library(seqinr) library(ade4) 1.1 Genómica composicional Si bien todos los organismos derivan del mismo organismo ancestral (LUCA) y por lo tanto deben compartir ciertas características en sus genomas, los mismos evolucionan y son la base de las diferencias entre los distintos organismos. A nivel genómico la evolución se da por un conjunto de eventos como las mutaciones, las duplicaciones de genes y regiones, las inserciones y “deleciones” de secuencias nucleotídicas. Claramente, la mayor parte de estos eventos producen cambios importantes a nivel composicional de los genomas. Por ejemplo, las mutaciones pueden llevar a una acumulación de cambios completamente al azar en los genomas, o puede tener determinados tipos de sesgos que favorezcan que las mutaciones sean hacia determinadas bases (por ejemplo, mutaciones desde las bases A y T hacia las base G y C, recordar que en el ADN doble cadena A se aparea con T y C con G). Los eventos de duplicación génica, por otro lado, generan cierta libertad para que ambas evolucionen más libremente ya que en principio una de las dos secuencias sigue siendo funcional (hasta que también deje de serlo) y de esta forma se pueden explorar nuevas funciones para una de las dos secuencias. En general, el conjunto de estos cambios hace que resulte interesante para entender las bases de la evolución en ambientes particulares, o aún en general, el conocimiento de las secuencias de los diferentes organismos y la comparación de las mismas. El estudio de las variaciones en la composición de los genomas es lo que se puede llamar Genómica Composicional y forma parte de la Genómica Comparativa. A continuación veremos el tema de la variación en composición, tanto desde el punto de vista de los nucleótidos, como de los codones en las secuencias codificantes y finalmente de los aminoácidos que forman las proteínas. Contenido GC genómico, génico, correlaciones, GCskew La proporción de bases guanina y citosina (G y C respectivamente) que componen una secuencia se conoce como el contenido GC de la misma, o G+C, o aún GC% (cuando expresado en porcentaje)3. Por las reglas de apareamiento de bases (A-T y G-C), no tiene importancia en la determinación de dicho contenido cual hebra del ADN se considera para el cálculo de esta proporción. Reglas de Chargaff Primera regla de paridad La primera regla sostiene que una molécula de ADN de doble cadena tiene a nivel global las siguientes igualdades en el porcentaje de bases:%A=%T y %G=%C. La validación rigurosa de la norma constituye la base del apareamiento de Watson-Crick de la doble hélice del ADN. Segunda regla de paridad La segunda regla es que tanto %A∼%T y %G∼%C son válidos para cada una de las dos hebras de ADN. Esto describe solamente una caracterísstica global de la composición de bases en una sola hebra de ADN. En principio, uno podría preguntarse cuál es la importancia de medir esta proporción en particular y no otra de las tres posibles combinaciones de dos bases distintas (hay 6 de estas combinaciones, pero como la frecuencia de las dos elegidas más la de las otras dos debe sumar 1, basta con calcular la mitad; v.gr. GC=1-AT). Es más, alguna de ellas resultan obviamente relevantes, como la proporción de purinas vs. pirimidinas (AG vs. CT). Entonces, ¿qué es lo que hace tan relevante al contenido GC de las secuencias? Transiciones y Transversiones Los cambios entre PURINAS (A y G) o entre PIRIMIDINAS (C y T) se llaman transiciones. Los cambios de PURINAS a PRIDIMINAS, o al revés, se llaman transversiones. Las transiciones son mucho más frecuentes que las transversiones. Existen varias razones, como veremos más adelante, pero desde el punto de vista bioquímico, tal vez la más obvia sea la diferencia en el número de puentes de hidrógeno entre los apareamientos A-T y los G-C, dos para el primero y tres para el segundo, así como diferencias en el “stacking” resultante. Esto conduce directamente a importantes diferencias en las propiedades físicas de la doble hebra, por ejemplo el incremento en el “melting point” como función del contenido GC (Yakovchuk_Protozanova_Frank-Kamenetskii_2006?). Pero más importante aún, en secuencias codificantes el código genético (tanto el “universal” como todas sus variantes) establece un mapeo entre la secuencia de ADN y la proteína que será traducida a partir de la misma. Dada la estructura “redundante” del código genético, algunos aminoácidos presentan poca dependencia del contenido GC, mientras que otros se encuentran fuertemente asociados a este problema (ya que los codones correspondientes tienen un sesgo importante). En la figura 1.1 se aprecia la tabla correspondiente al código genético universal (que claramente no es universal). Claramente, de acuerdo a los colores, que representan propiedades de los aminoácidos, los mismos se encuentran distribuidos en forma bastante organizada de acuerdo a las mismas. Cada columna marca una base diferente en segunda posición del codón (U, C, A, G). Por ejemplo, la tercera columna incluye los codones con segunda base A (adenina) y la misma codifica para aminoácidos mayormente codificados por duetos. La primera columna corresponde a codones con segunda base U (uracilo, correspondiente al ADN T) y codifica para aminoácidos apolares. Alguna propiedades del código genético universal 2 Singletons (Met y Trp), 9 Duetos (Phe, Tyr, His, Gln, Asn, Lys, Asp, Glu, Cys), 1 Terceto (Ile), 5 Cuartetos (Val, Pro, Thr, Ala, Gly) y 3 Sextetos (Leu, Ser, Arg) La tercera columna (A en segunda base) codifica duetos: 2/3 de los cambios en tercera base no son sinónimos. La primera base del codón es muy conservada: cambio de bloque-fila implica en general cambio de aminoácido, excepto en sextetos Arg y Leu. La segunda base del codón es la más conservada: cambio de columna implica cambio de aminoácido La tercera base es la más neutra y por lo tanto menos conservada (rol de los cuartetos). Los cambios de aminoácidos (de cuál a cuál) no son todos equivalentes en su impacto: hay cambios conservativos y otros disruptivos. Entre los aminoácidos codificados por codones con sesgo GC(AT) tenemos Phe (5 A/T en 6 posiciones), Ile (8 A/T en 9) y Tyr (5 A/T en 6). Por ejemplo, en el genoma de Buchnera aphidicola str. Cc (Cinara cedri), una bacteria parásita intracelular obligada con contenido GC de 20.1%, mientras que en la proteína con mayor contenido GC del genoma (36.7%) el uso de estos 3 aminoácidos corresponde al 16%, en la proteína con menor contenido GC (8.6%) el uso de los mismos sube a 48%. Estas diferencias no tendrían de por sí una consecuencia necesaria a nivel de diferencias entre organismos ya que de hecho el contenido GC podría ser la simple consecuencia de los aminoácidos constituyentes de las proteínas y no al revés. Es decir, la distribución del contenido GC de las proteínas de un organismo sería solo el reflejo de la constitución de las mismas. Figura 1.1: Tabla del código genético universal. En amarillo los aminoácidos apolares, en verdes los polares, azul básicos y rosa ácidos, con blanco correspondiendo a los codones de parada (de Wikipedia, https://es.wikipedia.org/wiki/Código_genético). Sin embargo, de ser esto cierto esperaríamos que organismos con una composición relativamente similar a nivel de las proteínas constituyentes tuvieran similar contenido GC y esto no es lo que ocurre. De hecho, es bien conocido que entre los organismos procariotas (Bacteria y Archaea) el contenido GC genómico varía desde 25% a 75% aproximadamente (Sueoka_1962?), con algunos organismos aún más extremos (ver box “GC en el debate Neutralismo-Seleccionismo”). Más aún, la bacteria Anaeromyxobacter dehalogenans 2CP-C, primer cultivo puro de una myxobacteria capaz de crecer en forma anaeróbica, con un contenido GC genómico de 74.9%, está constituída por proteínas cuyo contenido GC va entre 56.5% y 88.0%. Comparando esto con los datos de B. aphidicola observamos que no existe superposición, es decir, ambas bacterias no tendrían ninguna proteína de similar composición. Sabemos sin embargo que ambas comparten un origen evolutivo único y por lo tanto descienden de un mismo organismo, además de contar ambas con una serie de proteínas con idéntica función, pero de hecho con una composición aminoacídica muy diferente. ¿Qué es entonces lo que nos permite pensar que sería el contenido GC el que conduce el proceso de sustitución de aminoácidos? Hay varios motivos para pensar en este sentido. El primero es que los procariotas, cuyo genoma es en su mayoría codificante, poseen una importante homogeneidad composicional (restringida por la necesidad de usar todos los aminoácidos), y esto se manifiesta aún en las regiones intergénicas, que no tienen mayores restricciones composicionales. Un ejemplo del alto nivel de homogeneidad se puede ver al comparar los intervalos inter-cuartílicos de contenido GC codificante, que tanto en B. aphidicola como en A. dehalogenans es de 6%, o en otras palabras, la mitad de las proteínas dentro de cada bacteria difieren en menos de 6% de contenido GC (comparar contra más de 50% entre ellas). Pero, además, existe otra evidencia fuerte. Así como calculamos el contenido GC de una secuencia, también podemos calcular el contenido GC en cada una de las posiciones de los codones de la misma. Como hay tres posiciones por codón tenemos entonces \\(GC_1\\), \\(GC_2\\) y \\(GC_3\\), de acuerdo al contenido GC solo considerando una posición a la vez. Si observamos el código genético con detenimiento vamos a observar que la tercera posición es la “más sinónima”, es decir, la posición en la que una mayor proporción de los cambios de base no afectan el aminoácido codificado. De hecho, excepto Met y Trp, todos los aminoácidos poseen codones sinónimos, con opción entre G/C y A/T. De acuerdo con esto, si el contenido GC no estuviera conduciendo el proceso de sustitución de aminoácidos, se podría esperar que el \\(GC_3\\) se mantuviera variando libremente entre los distintos genomas, con casi tanta varianza entre como dentro de genomas. Sin embargo esto no es así, ya que existe una fuerte correlación positiva entre el contenido GC y el \\(GC_3\\), tanto a nivel de secuencias como considerando los genomas enteros (en procariotas) y aún con las regiones intergénicas flanqueantes (Zerial_Salinas_Filipski_Bernardi_1986?). Además de los sesgos en contenido GC que discutimos más arriba, existen otros sesgos menos obvios pero con muy importantes consecuencias prácticas. Por ejemplo, si consideramos una región particular de la mayoría de los genomas bacterianos es posible observar una diferencia importante (dentro de cada hebra) entre el número de bases G y C, así como entre A y T. De hecho, este fenómeno se encuentra asociado a la replicación de los genomas bacterianos (usualmente circulares) y típicamente la hebra “leading” se encuentra enriquecida en G y T, mientras que la “lagging” se encuentra enriquecida en C y A. Las desviaciones de las frecuencias G=C y A=T se conocen como \\(GC_{skew}\\) y \\(AT_{skew}\\) respectivamente 4. Una aplicación práctica evidente de esto es la determinación (aproximada) del origen de replicación, ya que en este (y en la posición opuesta dentro del genoma circular) habrá un cambio de signo del \\(GC_{skew}\\) (asociado a la densidad de genes en una hebra y otra). Una forma de visualizar esto es graficando el \\(GC_{skew}\\) en las ordenadas contra la posición del genoma (centro de la ventana) a partir del cual fue calculado, identificando el cambio de signo en las ordenadas. Otra alternativa, generalmente más efectiva es plotear el \\(GC_{skew}\\) acumulado contra la posición y observar los máximos y mínimos del gráfico, que usualmente están a una distancia de medio genoma (Grigoriev_1998?). PRÁCTICO Las bacterias metano/butanotróficas son de alto interés biotecnológico, dada su capacidad de metabolizar metano y butano, respectivamente. Esto permite su aplicación en la bio-remediación ecológica (por ejemplo en la degradación de Methyl tert-butyl ether, MTBE, un aditivo con propiedades antidetonantes en combustibles), en la detección de contaminación de suelos, así como en la detección/confirmación de yacimientos petrolíferos a partir de muestras de suelos. En las clases siguientes vamos a explorar las propiedades y características genómicas de algunos de estos organismos, introduciéndonos en la genómica comparativa. En un principio vamos a trabajar con los genomas de los siguientes organismos: Gordonia polyisoprenivorans VH2 Methylibium petroleiphilum PM1 Pseudonocardia dioxanivorans CB119 Analiza el contenido de la carpeta “data” ¿Cuáles son los diferentes formatos y qué representan? ¿Por qué existen varios replicones por organismo? ¿Cuales son los tamaños (aproximados) de esos replicones? #################################################################### # # Primero vamos intentar determinar el origen de replicación, # a través del GCskew. # Vamos ahora a cargar las secuencias de cada uno de los genomas # (en formato GENBANK). # Cambia el directorio antes con \\textit{setwd()} si fuera necesario. # #################################################################### #################################################################### #### Gordonia_polyisoprenivorans_VH2 gp.or&lt;- oriloc(gbk=&quot;data/Gordonia_polyisoprenivorans_VH2_uid86651/NC_016906.gbk&quot;) draw.oriloc(gp.or) #################################################################### #### Methylibium_petroleiphilum_PM1 mp.or&lt;- oriloc(gbk=&quot;data/Methylibium_petroleiphilum_PM1_uid58085/NC_008825.gbk&quot;) draw.oriloc(mp.or) #################################################################### #### Pseudonocardia_dioxanivorans_CB1190 pd.or&lt;- oriloc(gbk=&quot;data/Pseudonocardia_dioxanivorans_CB1190_uid65087/NC_015312.gbk&quot;) ## Warning in gbk2g2(tmpgbk, g2.coord): 5&#39; partial genes encountered (no ## output):141557616348370272172283685310221142114411461402158716511852193020142118217721952304231227543064306531133237325632993441344634523467349639264515452545924663466446654837484248474851499152255734604460536319636663946487 ## Warning in gbk2g2(tmpgbk, g2.coord): 3&#39; partial genes encountered (no ## output):74857626366118246483563610702722725803837114411461455227523042314246129203065312432223299333234133441344634563458350835193529361537973930422243704384451545254841529653685401551455815624573459616014604660536082639466286645 draw.oriloc(pd.or) Si bien existe una fuerte controversia sobre la explicación causal de todas estas correlaciones, así como de correlaciones entre el contenido GC y factores del ambiente donde viven los organismos (ver box “GC en el debate Neutralismo-Seleccionismo”), resulta claro que el contenido GC tiene un importante rol en la evolución de los organismos y en los procesos moleculares que rigen a los mismos (incluso se debe tener en cuenta a la hora de calcular algunos índices genómicos o en los procesos bioquímicos que requieran la denaturalización del ADN). Existen diversas herramientas para el cálculo del contenido GC, alguna de ellas web (v.gr. Mobyle http://mobyle.pasteur.fr/) que sirven para un cálculo rápido de una o pocas secuencias. Sin embargo, si el cálculo involucra muchas secuencias lo usual es recurrir a la programación de tipo “scripting”, usualmente en lenguajes como Python (http://python.org/), Perl (http://www.perl.org/), o Java (http://www.java.com; todos ellos poseen módulos “Bio” que facilitan todas las tareas), en R (http://cran.r-project.org/) a través de bibliotecas como seqinr, en bash (cuando se trabaja en Linux-UNIX o Mac OS-X), o usando paquetes como EMBOSS (http://emboss.sourceforge.net/). Si se desea trabajar con genomas procariotas ya secuenciados, una página interesante es la de OligoWeb (http://insilico.ehu.es/oligoweb/) ya que además de las frecuencias de nucleótidos de los distintos genomas ya tiene calculados otros índices y estadísticos. #################################################################### # # Vamos ahora a cargar las secuencias codificantes de cada uno de # los genomas (en formato FASTA). # Cambia el directorio antes con \\textit{setwd()} si fuera necesario. # Luego vamos a realizar una tabla de uso de GC y vamos a realizar un # boxplot de contenido GC, así como los densityplots correspondientes. # #################################################################### #################################################################### #### Gordonia_polyisoprenivorans_VH2 gp&lt;-read.fasta(&quot;data/Gordonia_polyisoprenivorans_VH2_uid86651/NC_016906.ffn&quot;) length(gp) ## [1] 4945 tableGC.gp&lt;-data.frame(GC=unlist(lapply(gp,GC)),GC1=unlist(lapply(gp,GC1)),GC2=unlist(lapply(gp,GC2)),GC3=unlist(lapply(gp,GC3))) rownames(tableGC.gp)&lt;-names(gp) cor(tableGC.gp) ## GC GC1 GC2 GC3 ## GC 1.0000000 0.6633612 0.6093803 0.3895552 ## GC1 0.6633612 1.0000000 0.2249037 -0.1319510 ## GC2 0.6093803 0.2249037 1.0000000 -0.2112476 ## GC3 0.3895552 -0.1319510 -0.2112476 1.0000000 pdf(&quot;data/Gordonia_polyisoprenivorans_VH2_distrGC.pdf&quot;) boxplot(tableGC.gp,col=&quot;orange&quot;,notch=TRUE,main=&quot;Gordonia polyisoprenivorans VH2&quot;) plot(density(tableGC.gp$GC),xlim=c(0.35,1),ylim=c(0,17),main=&quot;Gordonia polyisoprenivorans VH2&quot;) par(new=TRUE) plot(density(tableGC.gp$GC1),xlim=c(0.35,1),ylim=c(0,17),col=&quot;blue&quot;,xaxt=&quot;n&quot;,yaxt=&quot;n&quot;,xlab=&quot;&quot;,ylab=&quot;&quot;,main=&quot;&quot;) par(new=TRUE) plot(density(tableGC.gp$GC2),xlim=c(0.35,1),ylim=c(0,17),col=&quot;red&quot;,xaxt=&quot;n&quot;,yaxt=&quot;n&quot;,xlab=&quot;&quot;,ylab=&quot;&quot;,main=&quot;&quot;) par(new=TRUE) plot(density(tableGC.gp$GC3),xlim=c(0.35,1),ylim=c(0,17),col=&quot;green&quot;,xaxt=&quot;n&quot;,yaxt=&quot;n&quot;,xlab=&quot;&quot;,ylab=&quot;&quot;,main=&quot;&quot;) par(new=FALSE) text(x=0.4,y=c(seq(15,12)),labels=c(&quot;GC&quot;,&quot;GC1&quot;,&quot;GC2&quot;,&quot;GC3&quot;),col=c(&quot;black&quot;,&quot;blue&quot;,&quot;red&quot;,&quot;green&quot;)) dev.off() ## quartz_off_screen ## 2 # #################################################################### #################################################################### #### Methylibium_petroleiphilum_PM1 mp&lt;-read.fasta(&quot;data/Methylibium_petroleiphilum_PM1_uid58085/NC_008825.ffn&quot;) length(mp) ## [1] 3819 tableGC.mp&lt;-data.frame(GC=unlist(lapply(mp,GC)),GC1=unlist(lapply(mp,GC1)),GC2=unlist(lapply(mp,GC2)),GC3=unlist(lapply(mp,GC3))) rownames(tableGC.mp)&lt;-names(mp) cor(tableGC.mp) ## GC GC1 GC2 GC3 ## GC 1.0000000 0.78184654 0.6155679 0.52052211 ## GC1 0.7818465 1.00000000 0.4215653 0.09348653 ## GC2 0.6155679 0.42156531 1.0000000 -0.17125722 ## GC3 0.5205221 0.09348653 -0.1712572 1.00000000 pdf(&quot;data/Methylibium_petroleiphilum_PM1_distrGC.pdf&quot;) boxplot(tableGC.mp,col=&quot;orange&quot;,notch=TRUE,main=&quot;Methylibium petroleiphilum PM1&quot;) plot(density(tableGC.mp$GC),xlim=c(0.35,1),ylim=c(0,17),main=&quot;Methylibium petroleiphilum PM1&quot;) par(new=TRUE) plot(density(tableGC.mp$GC1),xlim=c(0.35,1),ylim=c(0,17),col=&quot;blue&quot;,xaxt=&quot;n&quot;,yaxt=&quot;n&quot;,xlab=&quot;&quot;,ylab=&quot;&quot;,main=&quot;&quot;) par(new=TRUE) plot(density(tableGC.mp$GC2),xlim=c(0.35,1),ylim=c(0,17),col=&quot;red&quot;,xaxt=&quot;n&quot;,yaxt=&quot;n&quot;,xlab=&quot;&quot;,ylab=&quot;&quot;,main=&quot;&quot;) par(new=TRUE) plot(density(tableGC.mp$GC3),xlim=c(0.35,1),ylim=c(0,17),col=&quot;green&quot;,xaxt=&quot;n&quot;,yaxt=&quot;n&quot;,xlab=&quot;&quot;,ylab=&quot;&quot;,main=&quot;&quot;) par(new=FALSE) text(x=0.4,y=c(seq(15,12)),labels=c(&quot;GC&quot;,&quot;GC1&quot;,&quot;GC2&quot;,&quot;GC3&quot;),col=c(&quot;black&quot;,&quot;blue&quot;,&quot;red&quot;,&quot;green&quot;)) dev.off() ## quartz_off_screen ## 2 # #################################################################### #################################################################### #### Pseudonocardia_dioxanivorans_CB1190 pd&lt;-read.fasta(&quot;data/Pseudonocardia_dioxanivorans_CB1190_uid65087/NC_015312.ffn&quot;) length(pd) ## [1] 6495 tableGC.pd&lt;-data.frame(GC=unlist(lapply(pd,GC)),GC1=unlist(lapply(pd,GC1)),GC2=unlist(lapply(pd,GC2)),GC3=unlist(lapply(pd,GC3))) rownames(tableGC.pd)&lt;-names(pd) cor(tableGC.pd) ## GC GC1 GC2 GC3 ## GC 1.0000000 0.807360824 0.7260260 0.299464920 ## GC1 0.8073608 1.000000000 0.4022521 0.001645615 ## GC2 0.7260260 0.402252149 1.0000000 -0.184710697 ## GC3 0.2994649 0.001645615 -0.1847107 1.000000000 pdf(&quot;data/Pseudonocardia_dioxanivorans_CB1190_distrGC.pdf&quot;) boxplot(tableGC.pd,col=&quot;orange&quot;,notch=TRUE,main=&quot;Pseudonocardia dioxanivorans CB1190&quot;) plot(density(tableGC.pd$GC),xlim=c(0.35,1),ylim=c(0,17),main=&quot;Pseudonocardia dioxanivorans CB119&quot;) par(new=TRUE) plot(density(tableGC.pd$GC1),xlim=c(0.35,1),ylim=c(0,17),col=&quot;blue&quot;,xaxt=&quot;n&quot;,yaxt=&quot;n&quot;,xlab=&quot;&quot;,ylab=&quot;&quot;,main=&quot;&quot;) par(new=TRUE) plot(density(tableGC.pd$GC2),xlim=c(0.35,1),ylim=c(0,17),col=&quot;red&quot;,xaxt=&quot;n&quot;,yaxt=&quot;n&quot;,xlab=&quot;&quot;,ylab=&quot;&quot;,main=&quot;&quot;) par(new=TRUE) plot(density(tableGC.pd$GC3),xlim=c(0.35,1),ylim=c(0,17),col=&quot;green&quot;,xaxt=&quot;n&quot;,yaxt=&quot;n&quot;,xlab=&quot;&quot;,ylab=&quot;&quot;,main=&quot;&quot;) par(new=FALSE) text(x=0.4,y=c(seq(15,12)),labels=c(&quot;GC&quot;,&quot;GC1&quot;,&quot;GC2&quot;,&quot;GC3&quot;),col=c(&quot;black&quot;,&quot;blue&quot;,&quot;red&quot;,&quot;green&quot;)) dev.off() ## quartz_off_screen ## 2 # #################################################################### Uso de codones Habíamos hablado antes de que los genomas procariotas eran extremadamente amplios en el rango de contenidos G+C y que dado lo reducido de lo no-codificante estas variaciones debían tener implicancias en el uso de codones. Es más, si comparamos entre genomas veremos que existe una clara correlación lineal entre el contenido GC del genoma con \\(GC_1\\), \\(GC_2\\) y \\(GC_3\\), aunque con diferentes pendientes. En general GC3 es una posición sinónima, es decir al cambiar de base en ella no hay cambio de aminoácido (debido a la degeneración del código, ver los cuartetos por ejemplo). \\(GC_1\\) y \\(GC_2\\) son mucho más restringidas en su variación dado que suelen implicar un cambio de aminoácido, lo que por lo general afecta negativamente la función. Esta redundancia en el código genético sumado a las posibilidades de reconocimiento alternativo codón/anticodón (no-Watson-Crick) permiten la evolución en los genomas de diferentes estrategias de uso de codones (UC)(Rocha_2004?). Esto que puede verse entre genomas también tiene su correlato a nivel interno en muchos genomas. Es conocido que en algunos genomas procariotas los genes altamente expresados tienden a usar codones mayores, que suelen ser reconocidos en forma de apareamiento WatsonCrick por los tRNAs más abundantes, aunque hay distintos modelos (ver la discusión en (Rocha_2004?)). Lograr comprender los factores que inciden en el uso de codones (también puede pensarse para aminoácidos) suele requerir de alguna forma de “resumir” la información. En un genoma procariota promedio tenemos unos 4000 genes y los codones de aminoácidos con degeneración son 59 (los 64 menos los 3 stop, menos Met y Trp), lo que se puede resumir en una tabla de esas dimensiones y queremos entender por qué los genes utilizan en forma distinta los codones, si es que lo hicieran. Para quitar la influencia del uso de aminoácidos como factor que influye en esta perspectiva (cada proteína tiene un uso diferencial de AAs) se puede estandarizar a la interna de cada aminoácido. Una de las estandarizaciones posibles es el RSCU (Sharp_Tuohy_Mosurski_1986?) en que el número observado de codones para un aminoácido es dividido por el número esperado si el uso dentro de un aminoácido fuera equiprobable. Es decir, \\[\\begin{equation} RSCU_{ij}=\\frac{x_{ij}}{\\frac{1}{n_i}\\sum_{j=1}^{n_i}\\ x_{ij}} \\tag{1.1} \\end{equation}\\] donde \\(x_{ij}\\) es el número de ocurrencias del codón \\(j\\) para el aminoácido \\(i\\) y \\(n_i\\) es la multiplicidad del aminoácido \\(i\\) (es decir, el número de codones que lo codifican). De cualquier forma, aún luego de estandarizar seguimos teniendo la tabla de 2000x59. La mayor parte de los humanos tenemos una limitada capacidad para visualizar datos en espacios de más de 3 dimensiones por lo que necesitamos reducir la “dimensionalidad” del problema. Podríamos pensar en representar las 59 variables originales de a pares (\\(\\binom{59}{2}=59*58/2=1711\\)), o aún de a tres (\\(\\binom{59}{3}=59*58*57/6=32509\\)) para ver interacciones entre más variables, pero estos números hacen imposible poder extraer conclusiones relevantes en forma sistemática. Afortunadamente, existen diferentes técnicas estadísticas exploratorias multivariadas que nos permiten abordar este tipo de cuestiones. Probablemente, de las técnicas usuales de análisis exploratorio multivariado, la más conocidas es el Análisis de Componentes Principales (PCA), aunque existen otros miembros prominentes de la familia. Uno de los más interesantes para nuestro tipo de problema es el Análisis de Correspondencia (COA, ver [Exploración multivariada: Análisis de Correspondenci]). El mismo nos permite reducir la variación en las 59 variables originales a unas pocas dimensiones, cada una de ellas una combinación de las originales, y que capturan la mayor parte de la variabilidad. De esta forma, el problema pasa a ser identificar qué variables biológicas se asocian a cada una de estas dimensiones. Ejemplos típicos de variables biológicas asociadas a la variación en el uso de codones dentro de genomas procariotas son el contenido GC del gen, el nivel de expresión, la hidropatía promedio de la proteína, la hebra en que se encuentra el gen, el \\(GC_{skew}\\) y la precisión en la traducción (Ermolaeva_2001?). Diferencias de uso de codones entre genomas han sido reportadas asociadas a varios factores eco-fisiológicos, entre ellos la temperatura óptima de crecimiento y adaptaciones a hiper-salinidad. Un programa diseñado específicamente para el análisis composicional es el codonW (http://codonw.sourceforge.net/), que analiza las frecuencias de bases, codones y aminoácidos, calcula diferentes índices estadísticos, así como permite realizar un COA en codones y AAs. Existen diversos índices, calculados a partir de las frecuencias de codones, que permiten identificar sesgos importantes en UC, que pueden ser suficientemente indicativos de por sí, o combinados con la información del COA. Por ejemplo, el Nc, o número efectivo de codones, es un índice del uso de codones intragénico. Puede tomar valores extremos de 20, cuando un solo codón por AA es utilizado en ese gen, a 61, cuando hay una equi-distribución de los mismos (Wright_1990?). Este índice es sensible al contenido GC del genoma y una mejora fue sugerida posteriormente que toma en cuenta este factor (Novembre_2002?). Otros dos índices, “codon bias index” (CBI) y “frequency of optimal codons” (Fop), calculan el sesgo a partir de un juego de codones “óptimos”, derivados respectivamente de un conjunto particular de genes o de la concentración de los tRNAs. Una aproximación totalmente diferente, que no depende de un conjunto particular de genes es el “codon Adaptation Index” (CAI)(Sharp_Li_1987?), que ha demostrado ser un indicador muy razonable del nivel de expresión de los genes (basado en comparaciones con técnicas para medir experimentalmente expresión, como los microarrays). El CAI es simplemente la media geométrica de los RSCU relativos (al máximo RSCU para ese AA) de todos los codones de una proteína. Con la misma notación que más arriba, si consideramos \\(\\text{w}_{ij}=RSCU_{ij}/RSCU_{i,max}\\), entonces se define \\(CAI=\\exp{\\frac{1}{L}\\sum_{k=1}^L\\ln \\text{w}_{ij}}\\). Pese a los buenos resultados del CAI, el mismo presenta también importantes debilidades, como la no-linealidad y una sobre-estimación de las desviaciones para secuencias cortas. En el 2009, Roymondal y colaboradores (Roymondal_Das_Sahoo_2009?) proponen una aproximación muy diferente, basada en las frecuencias de cada base en las distintas posiciones de los codones, que lleva al índice RCB. Estos autores proponen para cada codón xyz calcular el \\(RCB\\) de acuerdo a la fórmula: \\[\\begin{equation} RCB_{xyz}=\\frac{f(xyz)}{f_1(x)f_2(y)f_3(z)} \\tag{1.2} \\end{equation}\\] (donde \\(f_1(x)\\), \\(f_2(y)\\), \\(f_3(z)\\) son las frecuencias de las bases \\(x\\), \\(y\\) y \\(z\\) en las posiciones 1, 2 y 3 respectivamente), para luego resumir toda la información a través de la media geométrica, \\(RCB=(\\prod_{l=1}^LRCB_{xyz}(l))^{1/L}-1\\). Este nuevo índice presenta ventajas respecto al CAI, pero aún presenta un problema importante para secuencias cortas, lo que llevó a sugerir una modificación del mismo (Relative Codon Adaptation, RCA), basada en el uso de pseudo-conteos (Fox_Erill_2010?). Un índice de expresión tiene mucha utilidad en la exploración de los factores que influyen en la composición diferente de los genes, pero un punto interesante es la posible relación entre la expresión con el efecto de “gene dosage” (más copias de genes disponibles a medida que la replicación avanza), resultado de favorecer los genes altamente expresados en una posición cercana al origen de replicación. Para investigar este efecto basta con ver cual es la relación entre el CAI y la posición. Una forma fácil consiste en un análogo del \\(GC_{skew}\\) acumulado, calculados como desvíos del CAI promedio y compararlo con las posiciones genómicas. Si existe un efecto de “gene dosage” el patrón de CAI debería mostrar un pico en la zona del origen de replicación. Un soporte adicional a la hora de entender lo que ocurre en el uso de codones cuando comparamos dos grupos, por ejemplo genes de alta expresión con los de baja expresión, es a través de las tablas de uso de codones. Las mismas contienen el conteo total por codón para cada grupo y si las agrupamos por AA podemos calcular la probabilidad de que las diferencias en uso de codones (para cada codón) se deban al azar. Para esto, dentro de cada AA se contruye una tabla de 2x2 (2 grupos a comparar y codón a analizar vs la suma de los otros dentro de AA) y con la misma realiza un test de \\(\\chi^2\\) con un grado de libertad. Es importante tener en cuenta las múltiples comparaciones a realizar (el número de hipótesis a ensayar, v.gr. el número de codones) a la hora de definir el umbral de significancia para corregir adecuadamente. Finalmente, el uso de codones de un organismo puede tener implicancias directas de carácter tecnológico. Como vimos más arriba, dentro de las mayores fuentes de variación en UC se encuentra en algunos organismos la expresión, con codones muy usados en los genes de alta expresión y un uso más plano en proteínas de baja expresión. Esto influye inclusive en el plegamiento de las proteínas, cambiando la solubilidad de la misma (Cortazzo_Cervenansky_Marin_Reiss_Ehrlich_Deana_2002?). Cuando deseamos expresar proteínas recombinantes resulta muy importante considerar no solo la secuencia de AAs de la proteína a expresar, sino también que el UC se adapte al UC en genes de alta expresión en el organismo hospedero. Ejemplo 1.3 Teniendo en cuenta todas las secuencias codificantes, en una bacteria de interés biotecnológico se observó el siguiente conteo de codones para dos aminoácidos: Aminoácido Codón Conteo Arg (R) CGU \\(666\\) Arg (R) CGC \\(1320\\) Arg (R) CGA \\(1457\\) Arg (R) CGG \\(1818\\) Arg (R) AGA \\(5913\\) Arg (R) AGG \\(5120\\) Val (V) GUU \\(7123\\) Val (V) GUC \\(2144\\) Val (V) GUA \\(1125\\) Val (V) GUG \\(8213\\) Calcular el RSCU para cada codón y determinar cuáles son los usados y si hay diferencias entre los aminoácidos en la forma en que usan los codones. De acuerdo a la ecuación (1.1), el RSCU se calcula como \\[\\begin{equation} RSCU_{ij}=\\frac{x_{ij}}{\\frac{1}{n_i}\\sum_{j=1}^{n_i}\\ x_{ij}} \\end{equation}\\] donde \\(x_{ij}\\) es el número de ocurrencias del codón \\(j\\) para el aminoácido \\(i\\). Tenemos dos aminoácidos diferentes, por lo vamos a calcular el RSCU de cada codón dentro de cada aminoácido. Lo primero es obtener la suma de codones en cada aminoácido, por lo que tenemos que para Arginina es igual a \\(666+1320+1457+1818+5913+5120=16294\\), mientras que para Valina es de \\(7123+2144+1125+8213=18605\\). Este es el número total de codones para cada uno de los aminoácidos, o lo que es lo mismo, el número de veces que aparece dicho aminoácido en las secuencias codificantes de nuestra bacteria. Para calcular el RSCU alcanza con dividir el número de ocurrencias de cada codón entre el total de veces que se utiliza el aminoácido y multiplicarlo por el número de codones que tiene el aminoácido (\\(n_i=6\\) en el caso de Arginina, \\(n_i=4\\) en el caso de Valina, ver el código genético). Por lo tanto, utilizando la ecuación (1.1), tenemos que por ejemplo, para el codón CGU de la Arginina su RSCU es igual a \\[\\begin{equation} RSCU_{R,CGU}=\\frac{x_{CGU}}{\\frac{1}{6}\\sum_{j=1}^6\\ x_{R,j}}=6 \\times \\frac{666}{16294}=0,2452 \\end{equation}\\] Para el codón CGC la cuenta es igual a \\[\\begin{equation} RSCU_{R,CGC}=\\frac{x_{CGC}}{\\frac{1}{6}\\sum_{j=1}^6\\ x_{R,j}}=6 \\times \\frac{1320}{16294}=0,4861 \\end{equation}\\] y así sucesivamente con todos los codones de este aminoácido, lo que nos deja con una tabla como la siguiente: Codón Conteo RSCU CGU \\(666\\) \\(0,2452\\) CGC \\(1320\\) \\(0,4861\\) CGA \\(1457\\) \\(0,5365\\) CGG \\(1818\\) \\(0,6694\\) AGA \\(5913\\) \\(2,1774\\) AGG \\(5120\\) \\(1.8854\\) Suma \\(16294\\) \\(6\\) De la misma manera, para la Valina, el RSCU del primer codón es igual a \\[\\begin{equation} RSCU_{V,GUU}=\\frac{x_{GUU}}{\\frac{1}{4}\\sum_{j=1}^4\\ x_{V,j}}=4 \\times \\frac{7123}{18605}=1,5314 \\end{equation}\\] mientras que para el resto de los codones se calcula en forma análoga, hasta obtener la siguiente tabla: Codón Conteo RSCU GUU \\(7123\\) \\(1,5314\\) GUC \\(2144\\) \\(0,4610\\) GUA \\(1125\\) \\(0,2419\\) GUG \\(8213\\) \\(1,7658\\) Suma \\(18605\\) \\(4\\) En ambos aminoácidos se observa que el uso de codones se aparta bastante de la hipótesis de uso similar. Mientras que en el primer caso (Arginina) los codones favorecidos son los codificados por el dueto (del sexteto), es decir AGA y AGG, en el segundo caso (Valina) los codones favorecidos son los que terminan en U o en G. #################################################################### --&gt; # Vamos ahora a crear las tablas de uso de codones para cada uno de --&gt; # los genomas. Para ello vamos a crear una función. --&gt; # --&gt; #################################################################### --&gt; mkdata &lt;- function(seqs) { tab &lt;- sapply(seqs, uco) tab &lt;- as.data.frame(tab) return( tab ) } tabgp &lt;- mkdata(gp) tabmp &lt;- mkdata(mp) tabpd &lt;- mkdata(pd) #################################################################### # # Ahora vamos a remover aquellas CDS con in-frame stop codons # (que son traducidos aquí como &quot;*&quot;), # así como CDS con menos de 100 codones. # #################################################################### cleanup &lt;- function(tab) { aa &lt;- translate(sapply(rownames(tab),s2c)) tab &lt;- tab[ , colSums(tab[which(aa == &quot;*&quot;), ]) == 1] tab &lt;- tab[ , colSums(tab) &gt; 100 ] return(tab) } tabgp &lt;- cleanup(tabgp) tabmp &lt;- cleanup(tabmp) tabpd &lt;- cleanup(tabpd) Exploración multivariada: Análisis de Correspondencia Este método fue desarrollado por Benzecrí (Benzecri_1980?), originalmente para trabajar con tablas de frecuencias. En resumen, la idea subyacente es dada una tabla de \\(n\\)x\\(p\\) (casos x variables) encontrar un sistema de \\(k\\) ejes ortogonales (con \\(k &lt; min(n,p)\\)) que condense el máximo de variación en los datos originales. Esto es posible en la medida en que las variables (casos) estén correlacionados en alguna medida y cuanto mayor sea esa asociación más varianza será condensada en pocos ejes (dimensiones). La métrica adoptada es la de la distancia \\(\\chi^2\\), o sea, para la celda correspondiente a la fila \\(i\\) y columna \\(j\\), la distancia será \\[\\begin{equation} d_{ij}=(O_{ij}-E_{ij})^2/E_{ij} \\tag{1.3} \\end{equation}\\] donde \\(O_{ij}\\) es el número observado y \\(E_{ij}\\) el número esperado para esa celda, usualmente el número total de observaciones multiplicado por las frecuencias relativas marginales en la tabla. Aplicando el COA a una tabla de frecuencias observadas vamos a obtener una serie de valores propios y vectores propios asociados (“eigen-values” y “eigen-vectors”), tantos como el mínimo de Filas-1 y Columnas-1. Cada uno de los valores propios está relacionado con la varianza explicada por la nueva dimensión correspondiente. La suma de todos los valores propios es equivalente al 100% de la varianza por lo que cada uno explicará una fracción correspondiente al valor propio sobre la suma de todos (la traza de la matriz de valores propios). A su vez, cada uno explica menor varianza que el anterior (están ordenados por el procedimiento de extracción). El punto importante es determinar con cuántos ejes (nuevas dimensiones) nos vamos a quedar. Cuantas más dimensiones retengamos mayor cantidad de la varianza original retendremos, pero al costo de dificultar la interpretación (el objetivo del COA es poder capturar la esencia de los datos, cuantas más dimensiones más difícil de visualizar la situación). Existen varios métodos para determinar el número de dimensiones a retener, pero en última instancia esto es una materia subjetiva. Un enfoque es gráfico (“scriplot”) y consiste en encontrar el cambio en la pendiente de los valores propios graficados en función de su número ordinal. Otra aproximación es retener los valores propios hasta que expliquen menos de lo que se esperaría por azar si cada unas de las variables originales explicara la misma proporción de la varianza. Por ejemplo, en una tabla de uso de aminoácidos, dado que hay 20 AAs la varianza promedio explicada por cada uno es 5% y por lo tanto luego de un COA en AAs retendríamos todos aquellos valores propios que expliquen más de 5% de la varianza. Cada una de las observaciones originales tendrá ahora unas nuevas coordenadas en el nuevo sistema de ejes ortogonales (las dimensiones). O sea, si por ejemplo retuvimos de nuestro COA en uso de AAs 3 dimensiones (combinaciones de las 20 originales) cada gen podrá representarse ahora en un espacio tridimensional. Asimismo, las variables originales están representadas de distinta manera en las nuevas dimensiones, es decir tienen distinta participación en cada una de ellas. Esto apunta a una de las características más destacables del COA, su simetría Filas/Columnas lo que permite el auxilio de representar en forma conjunta (en el mismo gráfico) la distribución de observaciones y variables (genes y AAs, por ejemplo) aunque las distancias entre observaciones y variables deben tomarse con cautela. La clave del éxito con el COA es lograr “etiquetar” las nuevas dimensiones con factores entendibles, biológicamente significativos, que vayan más allá de las propias variables medidas. Ejemplo de esto en genómica podría ser la expresión diferencial, los compartimientos celulares, proteínas IMP (“integral membrane proteins”), etc, cuando se correlacionan con alguno de los ejes del análisis. La forma tradicional de trabajo, al menos en el campo de la genómica comparativa, consiste en determinar cuántos valores propios retener para luego graficarlos de a pares intentando ver la distribución conjunta de observaciones y variables en las nuevas dimensiones. Se puede además intentar correlacionar variables externas con las nuevas dimensiones, buscando “etiquetas” para las dimensiones. Un link interesante de análisis de correspondencia: http://www.micheloud.com/FXM/COR/index.htm #################################################################### # # Fusionamos las tres tablas y realizamos un análisis # de correspondencia (COA) en uso de codones. # #################################################################### tab &lt;- cbind(tabgp, tabmp, tabpd) names(tab) &lt;- 1:ncol(tab) coa &lt;- dudi.coa(tab, scan = FALSE, nf = 2) #################################################################### # # Sin embargo, para tener en cuenta la diferencia en uso de AAs # es necesario realizar el COA de codones dentro de AAs. # Esto lo hacemos con la función wca(). # #################################################################### facaa &lt;- as.factor(aaa(translate(sapply(rownames(tab),s2c)))) scua &lt;- wca(coa, facaa, scan = FALSE, nf = 2) #################################################################### # # Vamos a realizar ahora el primer mapa factorial: # #################################################################### facsp &lt;- as.factor(rep(c(&quot;gp&quot;,&quot;mp&quot;,&quot;pd&quot;), c(ncol(tabgp),ncol(tabmp),ncol(tabpd)))) s.class(scua$co, fac = facsp, cstar = 0, label = &quot;&quot;, col = c(&quot;green&quot;, &quot;red&quot;, &quot;blue&quot;), cell=0, cpoint=0.8, sub=&quot;First factorial map for synonymous codon usage&quot;) s.label(scua$li, add.plot = TRUE, clab = 0.75) legend( x = 0.1, y = -0.4, pch = 19, col = c(&quot;green&quot;, &quot;red&quot;, &quot;blue&quot;), legend = c(expression(italic(&quot;G.polyisoprenivorans&quot;)), expression(italic(&quot;M.petroleiphilum&quot;)), expression(italic(&quot;P.dioxanivorans&quot;))), xjust = 0, cex = 0.8) #################################################################### # # Es normal que el contenido GC tenga que ver con alguno de los # primeros ejes (es decir, es una de la fuerzas mayores que dirigen # el uso de codones). Para ello vamos primero a comparar los # contenidos GC de los 3 genomas y luego vamos a calcular el # contenido GC de cada secuencia (recordar que recortamos las tablas) # #################################################################### pdf(&quot;data/GC_GC3_all3.pdf&quot;) plot(density(tableGC.gp$GC),xlim=c(0.40,0.9),ylim=c(0,17),main=&quot;GC content&quot;,col=&quot;green&quot;) par(new=TRUE) plot(density(tableGC.mp$GC),xlim=c(0.40,0.9),ylim=c(0,17),col=&quot;red&quot;,xaxt=&quot;n&quot;,yaxt=&quot;n&quot;,xlab=&quot;&quot;,ylab=&quot;&quot;,main=&quot;&quot;) par(new=TRUE) plot(density(tableGC.pd$GC),xlim=c(0.40,0.9),ylim=c(0,17),col=&quot;blue&quot;,xaxt=&quot;n&quot;,yaxt=&quot;n&quot;,xlab=&quot;&quot;,ylab=&quot;&quot;,main=&quot;&quot;) par(new=FALSE) text(x=0.5,y=c(seq(15,13)),labels=c(&quot;G.polyisoprenivorans&quot;,&quot;M.petroleiphilum&quot;,&quot;P.dioxanivorans&quot;),col=c(&quot;green&quot;,&quot;red&quot;,&quot;blue&quot;)) plot(density(tableGC.gp$GC3),xlim=c(0.35,1),ylim=c(0,17),main=&quot;GC3 content&quot;,col=&quot;green&quot;) par(new=TRUE) plot(density(tableGC.mp$GC3),xlim=c(0.35,1),ylim=c(0,17),col=&quot;red&quot;,xaxt=&quot;n&quot;,yaxt=&quot;n&quot;,xlab=&quot;&quot;,ylab=&quot;&quot;,main=&quot;&quot;) par(new=TRUE) plot(density(tableGC.pd$GC3),xlim=c(0.35,1),ylim=c(0,17),col=&quot;blue&quot;,xaxt=&quot;n&quot;,yaxt=&quot;n&quot;,xlab=&quot;&quot;,ylab=&quot;&quot;,main=&quot;&quot;) par(new=FALSE) text(x=0.5,y=c(seq(15,13)),labels=c(&quot;G.polyisoprenivorans&quot;,&quot;M.petroleiphilum&quot;,&quot;P.dioxanivorans&quot;),col=c(&quot;green&quot;,&quot;red&quot;,&quot;blue&quot;)) dev.off() ## quartz_off_screen ## 2 #################################################################### # # Acá calculamos el contenido GC de cada secuencia de la tabla grande # #################################################################### all.GC&lt;-t(cbind(tabgp,tabmp,tabpd))%*%unlist(lapply(lapply(rownames(scua$li),s2c),GC))/apply(t(cbind(tabgp,tabmp,tabpd)),1,sum) all.GC1&lt;-t(cbind(tabgp,tabmp,tabpd))%*%unlist(lapply(lapply(rownames(scua$li),s2c),GC1))/apply(t(cbind(tabgp,tabmp,tabpd)),1,sum) all.GC2&lt;-t(cbind(tabgp,tabmp,tabpd))%*%unlist(lapply(lapply(rownames(scua$li),s2c),GC2))/apply(t(cbind(tabgp,tabmp,tabpd)),1,sum) all.GC3&lt;-t(cbind(tabgp,tabmp,tabpd))%*%unlist(lapply(lapply(rownames(scua$li),s2c),GC3))/apply(t(cbind(tabgp,tabmp,tabpd)),1,sum) all.GCs&lt;-data.frame(GC=all.GC,GC1=all.GC1,GC2=all.GC2,GC3=all.GC3) cor(scua$co,all.GCs) ## GC GC1 GC2 GC3 ## Comp1 -0.6463028 -0.2774959 0.001555888 -0.9867793 ## Comp2 0.2291589 0.2244166 0.234594570 0.0342075 #################################################################### # # Ploteamos el primer eje del COA vs. GC3 # #################################################################### plot(scua$co[,1],all.GCs$GC3,cex=0.5,col=&quot;blue&quot;,xlab=&quot;Axis 1&quot;,ylab=&quot;GC3&quot;) abline(lm(all.GCs$GC3~scua$co[,1]),col=&quot;red&quot;,lty=2) #################################################################### # # Vamos ahora a analizar cada genoma en forma independiente. # Como ejemplo nosotros vamos a realizar los análisis con # Gordonia polyisoprenivorans VH2. # Tu debes realizarlo también con los otros. # #################################################################### #################################################################### # # Primero el COA en codones dentro de AAs. # Averigua que son los distintos atributos del COA. # Cual es el porcentaje de varianza explicada por los 2 primeros ejes? # #################################################################### coa.gp &lt;- dudi.coa(tabgp, scan = FALSE, nf = 2) facaa.gp &lt;- as.factor(aaa(translate(sapply(rownames(tabgp),s2c)))) scua.gp &lt;- wca(coa.gp, facaa.gp, scan = FALSE, nf = 2) attributes(scua.gp) ## $names ## [1] &quot;tab&quot; &quot;cw&quot; &quot;lw&quot; &quot;eig&quot; &quot;rank&quot; &quot;nf&quot; &quot;l1&quot; &quot;co&quot; &quot;li&quot; ## [10] &quot;c1&quot; &quot;call&quot; &quot;ratio&quot; &quot;ls&quot; &quot;as&quot; &quot;tabw&quot; &quot;fac&quot; ## ## $class ## [1] &quot;within&quot; &quot;dudi&quot; #################################################################### # # Acá calculamos el contenido GC de cada secuencia de la tabla. # Luego calculamos la correlación con los primeros ejes del COA. # #################################################################### GC.gp&lt;-t(tabgp)%*%unlist(lapply(lapply(rownames(scua$li),s2c),GC))/apply(t(tabgp),1,sum) GC1.gp&lt;-t(tabgp)%*%unlist(lapply(lapply(rownames(scua$li),s2c),GC1))/apply(t(tabgp),1,sum) GC2.gp&lt;-t(tabgp)%*%unlist(lapply(lapply(rownames(scua$li),s2c),GC2))/apply(t(tabgp),1,sum) GC3.gp&lt;-t(tabgp)%*%unlist(lapply(lapply(rownames(scua$li),s2c),GC3))/apply(t(tabgp),1,sum) GCs.gp&lt;-data.frame(GC=GC.gp,GC1=GC1.gp,GC2=GC2.gp,GC3=GC3.gp) cor(scua.gp$co,GCs.gp) ## GC GC1 GC2 GC3 ## Comp1 -0.4025264 0.02930106 0.21194315 -0.91776674 ## Comp2 0.1063531 0.03553139 0.05983686 0.08304826 #################################################################### # # Otro factor que suele estar asociado con los primeros ejes es el # nivel de expresión de las proteínas. Como esto es difícil de medir # una aproximación es el uso de índices como el CAI. # Vamos a calcular el CAI de cada proteína, pero para ello # necesitamos conocer la frecuencia de codones en proteínas de alta # expresión. Vamos a usar las proteínas ribosomales como nuestro # juego de alta expresión. # #################################################################### gordo.ptt&lt;-read.delim(&quot;data/Gordonia_polyisoprenivorans_VH2_uid86651/NC_016906.ptt&quot;,header=TRUE,sep=&quot;\\t&quot;,skip=2) dim(gordo.ptt) ## [1] 4945 9 gordo.rp.table&lt;-gordo.ptt[grep(&quot;ribosomal protein&quot;,gordo.ptt$Product,ignore.case=TRUE),] gp.rp&lt;-gp[grep(&quot;ribosomal protein&quot;,gordo.ptt$Product,ignore.case=TRUE)] names(gp.rp) ## [1] &quot;gi|378715556|ref|NC_016906.1|:1364940-1365107&quot; ## [2] &quot;gi|378715556|ref|NC_016906.1|:1372614-1373045&quot; ## [3] &quot;gi|378715556|ref|NC_016906.1|:1373138-1373854&quot; ## [4] &quot;gi|378715556|ref|NC_016906.1|:1418701-1418874&quot; ## [5] &quot;gi|378715556|ref|NC_016906.1|:c1499686-1499417&quot; ## [6] &quot;gi|378715556|ref|NC_016906.1|:c1500050-1499745&quot; ## [7] &quot;gi|378715556|ref|NC_016906.1|:c1500214-1500050&quot; ## [8] &quot;gi|378715556|ref|NC_016906.1|:c1500450-1500214&quot; ## [9] &quot;gi|378715556|ref|NC_016906.1|:1501882-1502166&quot; ## [10] &quot;gi|378715556|ref|NC_016906.1|:c1564211-1563585&quot; ## [11] &quot;gi|378715556|ref|NC_016906.1|:1802313-1802756&quot; ## [12] &quot;gi|378715556|ref|NC_016906.1|:1802753-1803349&quot; ## [13] &quot;gi|378715556|ref|NC_016906.1|:2046923-2047150&quot; ## [14] &quot;gi|378715556|ref|NC_016906.1|:2231517-2231828&quot; ## [15] &quot;gi|378715556|ref|NC_016906.1|:2231863-2232126&quot; ## [16] &quot;gi|378715556|ref|NC_016906.1|:2261345-2261800&quot; ## [17] &quot;gi|378715556|ref|NC_016906.1|:2265401-2265742&quot; ## [18] &quot;gi|378715556|ref|NC_016906.1|:2273944-2274753&quot; ## [19] &quot;gi|378715556|ref|NC_016906.1|:2335690-2335959&quot; ## [20] &quot;gi|378715556|ref|NC_016906.1|:c2971933-2971553&quot; ## [21] &quot;gi|378715556|ref|NC_016906.1|:c2972162-2971968&quot; ## [22] &quot;gi|378715556|ref|NC_016906.1|:c2993384-2991801&quot; ## [23] &quot;gi|378715556|ref|NC_016906.1|:3365935-3366195&quot; ## [24] &quot;gi|378715556|ref|NC_016906.1|:3385365-3385556&quot; ## [25] &quot;gi|378715556|ref|NC_016906.1|:c3959947-3959318&quot; ## [26] &quot;gi|378715556|ref|NC_016906.1|:c3961760-3961155&quot; ## [27] &quot;gi|378715556|ref|NC_016906.1|:c3962189-3961782&quot; ## [28] &quot;gi|378715556|ref|NC_016906.1|:c3962557-3962189&quot; ## [29] &quot;gi|378715556|ref|NC_016906.1|:c3962866-3962753&quot; ## [30] &quot;gi|378715556|ref|NC_016906.1|:c3977585-3977145&quot; ## [31] &quot;gi|378715556|ref|NC_016906.1|:c3977767-3977582&quot; ## [32] &quot;gi|378715556|ref|NC_016906.1|:c3978420-3977773&quot; ## [33] &quot;gi|378715556|ref|NC_016906.1|:c3978868-3978464&quot; ## [34] &quot;gi|378715556|ref|NC_016906.1|:c3979408-3978872&quot; ## [35] &quot;gi|378715556|ref|NC_016906.1|:c3979823-3979425&quot; ## [36] &quot;gi|378715556|ref|NC_016906.1|:c4010659-4010474&quot; ## [37] &quot;gi|378715556|ref|NC_016906.1|:c4011239-4010661&quot; ## [38] &quot;gi|378715556|ref|NC_016906.1|:c4011558-4011241&quot; ## [39] &quot;gi|378715556|ref|NC_016906.1|:c4011928-4011560&quot; ## [40] &quot;gi|378715556|ref|NC_016906.1|:c4110213-4109929&quot; ## [41] &quot;gi|378715556|ref|NC_016906.1|:c4110461-4110228&quot; ## [42] &quot;gi|378715556|ref|NC_016906.1|:c4110877-4110461&quot; ## [43] &quot;gi|378715556|ref|NC_016906.1|:c4111687-4110881&quot; ## [44] &quot;gi|378715556|ref|NC_016906.1|:c4112103-4111690&quot; ## [45] &quot;gi|378715556|ref|NC_016906.1|:c4112384-4112103&quot; ## [46] &quot;gi|378715556|ref|NC_016906.1|:c4113241-4112405&quot; ## [47] &quot;gi|378715556|ref|NC_016906.1|:c4113577-4113272&quot; ## [48] &quot;gi|378715556|ref|NC_016906.1|:c4114251-4113580&quot; ## [49] &quot;gi|378715556|ref|NC_016906.1|:c4114907-4114248&quot; ## [50] &quot;gi|378715556|ref|NC_016906.1|:c4115230-4114925&quot; ## [51] &quot;gi|378715556|ref|NC_016906.1|:c4187706-4187236&quot; ## [52] &quot;gi|378715556|ref|NC_016906.1|:c4188084-4187713&quot; ## [53] &quot;gi|378715556|ref|NC_016906.1|:c4309181-4308789&quot; ## [54] &quot;gi|378715556|ref|NC_016906.1|:c4309780-4309256&quot; ## [55] &quot;gi|378715556|ref|NC_016906.1|:c5540123-5539671&quot; ## [56] &quot;gi|378715556|ref|NC_016906.1|:c5540378-5540145&quot; ## [57] &quot;gi|378715556|ref|NC_016906.1|:c5541348-5541067&quot; ## [58] &quot;gi|378715556|ref|NC_016906.1|:c5669300-5669157&quot; #################################################################### # # Antes de poder obtener el CAI vamos a calcular el peso relativo # de cada codón dentro de AA en el juego de proteínas de alta # expresión. # #################################################################### gp.rp.uco&lt;-apply(t(sapply(gp.rp,uco)),2,sum) df.gp.rp.uco&lt;-data.frame(uco=as.numeric(gp.rp.uco),aa=facaa) gp.rp.max&lt;-unlist(by(df.gp.rp.uco[,&quot;uco&quot;],df.gp.rp.uco[,&quot;aa&quot;],max))[1:21] mive&lt;-vector(&quot;numeric&quot;,64) names(mive)&lt;-names(gp.rp.uco) for (i in 1:length(levels(facaa))){ mive[facaa==levels(facaa)[i]]&lt;-gp.rp.max[i] } w&lt;-gp.rp.uco/mive #################################################################### # # Finalmente calculamos el CAI. Para correlacionarlo con el COA hay # Que recordar que subseteamos la tabla de CDS y hay que hacer lo # mismo con el vector de CAIs. Luego calculamos la correlación # con los primeros ejes del COA y con el GC. # # #################################################################### cai.tmp&lt;-sapply(gp, cai, w = w) cai.gp&lt;-cai.tmp[names(cai.tmp)%in%rownames(t(tabgp))] cor(scua.gp$co,cai.gp) ## [,1] ## Comp1 -0.9415747 ## Comp2 -0.1532840 cor(GCs.gp,cai.gp) ## [,1] ## GC 0.2352353 ## GC1 -0.1312153 ## GC2 -0.3407118 ## GC3 0.8687789 #################################################################### # # Observamos ahora que genes quedan en las puntas de los ejes del # COA. Finalmente ploteamos los primeros ejes. # #################################################################### gordo.ptt.red&lt;-gordo.ptt[names(cai.tmp)%in%rownames(t(tabgp)),] head(gordo.ptt.red[order(scua.gp$co[,1]),],50) ## Location Strand Length PID Gene Synonym Code COG ## 4838 5549501..5550517 + 338 378720394 - GPOL_c49230 - - ## 922 1087747..1089033 + 428 378716478 aceA GPOL_c09380 - - ## 3949 4581960..4582511 + 183 378719505 - GPOL_c40210 - - ## 1954 2265401..2265742 + 113 378717510 rplS GPOL_c19940 - - ## 1342 1563585..1564211 - 208 378716898 rplY GPOL_c13660 - - ## 3505 4011241..4011558 - 105 378719061 rplX GPOL_c35720 - - ## 3541 4113272..4113577 - 101 378719097 rplW GPOL_c36080 - - ## 4849 5560352..5560927 + 191 378720405 - GPOL_c49340 - - ## 2193 2534605..2535168 + 187 378717749 efp GPOL_c22400 - - ## 15 17051..17572 + 173 378715571 - GPOL_c00170 - - ## 827 984417..984848 + 143 378716383 - GPOL_c08400 - - ## 4827 5539671..5540123 - 150 378720383 rplI GPOL_c49120 - - ## 3701 4290557..4294072 - 1171 378719257 rpoB GPOL_c37680 - - ## 881 1042017..1043642 + 541 378716437 groL1 GPOL_c08950 - - ## 309 380188..380685 + 165 378715865 rraA GPOL_c03150 - - ## 3769 4372092..4372994 - 300 378719325 sucD GPOL_c38360 - - ## 3609 4187236..4187706 - 156 378719165 rpsG GPOL_c36760 - - ## 537 643882..646041 + 719 378716093 - GPOL_c05470 - - ## 4313 4982129..4983163 - 344 378719869 fba GPOL_c43890 - - ## 3478 3978464..3978868 - 134 378719034 rplR GPOL_c35450 - - ## 3245 3718745..3719143 + 132 378718801 - GPOL_c33100 - - ## 2085 2413330..2413917 - 195 378717641 - GPOL_c21250 - - ## 2285 2640797..2643607 - 936 378717841 acn GPOL_c23340 - - ## 3454 3959318..3959947 - 209 378719010 rplQ GPOL_c35210 - - ## 2949 3413607..3414620 - 337 378718505 ilvC GPOL_c30130 - - ## 867 1025443..1026291 + 282 378716423 - GPOL_c08810 - - ## 4117 4764969..4767512 - 847 378719673 - GPOL_c41900 - - ## 2208 2549730..2550941 + 403 378717764 metK GPOL_c22550 - - ## 3607 4183661..4184851 - 396 378719163 tuf GPOL_c36740 - - ## 1920 2231517..2231828 + 103 378717476 rplU GPOL_c19600 - - ## 2559 2971553..2971933 - 126 378718115 rplT GPOL_c26160 - - ## 3911 4535478..4536089 + 203 378719467 - GPOL_c39790 - - ## 1779 2059214..2060662 + 482 378717335 atpD GPOL_c18100 - - ## 3433 3938258..3939736 - 492 378718989 ahcY GPOL_c35000 - - ## 1062 1237998..1238300 + 100 378716618 - GPOL_c10790 - - ## 682 841328..841759 + 143 378716238 - GPOL_c06920 - - ## 2084 2412785..2413318 - 177 378717640 ahpD2 GPOL_c21240 - - ## 2021 2336423..2338702 + 759 378717577 pnp GPOL_c20610 - - ## 326 396919..397689 - 256 378715882 - GPOL_c03320 - - ## 332 403110..403739 - 209 378715888 sodA GPOL_c03380 - - ## 3504 4010661..4011239 - 192 378719060 rplE GPOL_c35710 - - ## 1170 1373138..1373854 + 238 378716726 rplA GPOL_c11910 - - ## 2227 2568890..2569906 + 338 378717783 gapA GPOL_c22740 - - ## 1550 1802313..1802756 + 147 378717106 rplM GPOL_c15800 - - ## 2782 3224134..3225567 + 477 378718338 glnA1 GPOL_c28410 - - ## 1161 1363728..1364219 - 163 378716717 - GPOL_c11780 - - ## 4279 4943937..4945328 + 463 378719835 fprA GPOL_c43550 - - ## 3989 4628190..4629029 + 279 378719545 cysA2 GPOL_c40610 - - ## 3700 4286519..4290478 - 1319 378719256 rpoC GPOL_c37670 - - ## 3014 3486163..3486654 + 163 378718570 - GPOL_c30780 - - ## Product ## 4838 inositol-3-phosphate synthase ## 922 isocitrate lyase AceA ## 3949 putative YceI-like lipid/polyisoprenoid-binding protein ## 1954 50S ribosomal protein L19 ## 1342 50S ribosomal protein L25 ## 3505 50S ribosomal protein L24 ## 3541 50S ribosomal protein L23 ## 4849 TerD domain-containing protein ## 2193 elongation factor P ## 15 peptidyl-prolyl cis-trans isomerase ## 827 hypothetical protein ## 4827 50S ribosomal protein L9 ## 3701 DNA-directed RNA polymerase subunit beta ## 881 60 kDa chaperonin ## 309 ribonuclease activity A regulator ## 3769 succinyl-CoA ligase [ADP-forming] subunit alpha ## 3609 30S ribosomal protein S7 ## 537 putative fatty acid oxidation complex alpha-subunit ## 4313 fructose-bisphosphate aldolase Fba ## 3478 50S ribosomal protein L18 ## 3245 glyoxalase/bleomycin resistance protein/dioxygenase ## 2085 putative alkylhydroperoxide reductase ## 2285 aconitate hydratase Acn ## 3454 50S ribosomal protein L17 ## 2949 ketol-acid reductoisomerase IlvC ## 867 carbon-nitrogen hydrolase family protein ## 4117 putative ATP-dependent Clp protease, ATP-binding subunit ClpC ## 2208 S-adenosylmethionine synthase MetK ## 3607 elongation factor Tu ## 1920 50S ribosomal protein L21 ## 2559 50S ribosomal protein L20 ## 3911 transglycosylase-like domain-containing protein ## 1779 ATP synthase subunit beta ## 3433 adenosylhomocysteinase AhcY ## 1062 hypothetical protein ## 682 peroxiredoxin, OsmC family protein ## 2084 alkyl hydroperoxide reductase AhpD ## 2021 polyribonucleotide nucleotidyltransferase Pnp ## 326 putative short-chain dehydrogenase ## 332 superoxide dismutase SodA ## 3504 50S ribosomal protein L5 ## 1170 50S ribosomal protein L1 ## 2227 glyceraldehyde-3-phosphate dehydrogenase ## 1550 50S ribosomal protein L13 ## 2782 glutamine synthetase ## 1161 hypothetical protein ## 4279 NADPH-ferredoxin reductase FprA ## 3989 thiosulfate sulfurtransferase CysA ## 3700 DNA-directed RNA polymerase subunit beta&#39; ## 3014 carbonate dehydratase-like protein tail(gordo.ptt.red[order(scua.gp$co[,1]),],50) ## Location Strand Length PID Gene Synonym Code COG ## 3488 3988593..3990845 - 750 378719044 - GPOL_c35550 - - ## 166 204106..205233 + 375 378715722 - GPOL_c01720 - - ## 2762 3202522..3202911 + 129 378718318 - GPOL_c28210 - - ## 3486 3986195..3987673 - 492 378719042 - GPOL_c35530 - - ## 359 428459..429220 + 253 378715915 - GPOL_c03650 - - ## 364 432072..432539 + 155 378715920 - GPOL_c03700 - - ## 161 191588..194686 - 1032 378715717 - GPOL_c01670 - - ## 1845 2129075..2130139 + 354 378717401 - GPOL_c18800 - - ## 2486 2882906..2883628 - 240 378718042 dhbA GPOL_c25360 - - ## 4820 5530951..5531469 - 172 378720376 - GPOL_c49050 - - ## 358 427966..428349 - 127 378715914 - GPOL_c03640 - - ## 3203 3673484..3674278 - 264 378718759 - GPOL_c32680 - - ## 4351 5024356..5025078 - 240 378719907 - GPOL_c44270 - - ## 162 194688..195419 - 243 378715718 - GPOL_c01680 - - ## 3208 3676631..3677539 - 302 378718764 - GPOL_c32730 - - ## 4352 5025140..5025448 + 102 378719908 - GPOL_c44280 - - ## 2813 3259189..3259731 - 180 378718369 - GPOL_c28730 - - ## 2459 2855360..2856685 - 441 378718015 kgtP GPOL_c25090 - - ## 2485 2881409..2882785 - 458 378718041 shiA GPOL_c25350 - - ## 178 222224..224497 + 757 378715734 - GPOL_c01840 - - ## 163 195681..197189 - 502 378715719 - GPOL_c01690 - - ## 686 844491..845876 + 461 378716242 - GPOL_c06960 - - ## 3133 3604256..3605158 - 300 378718689 - GPOL_c31970 - - ## 3201 3672553..3672918 - 121 378718757 - GPOL_c32660 - - ## 2606 3021802..3022464 - 220 378718162 - GPOL_c26640 - - ## 3560 4132594..4133019 - 141 378719116 - GPOL_c36270 - - ## 3559 4131657..4132082 - 141 378719115 - GPOL_c36260 - - ## 2612 3027434..3028105 + 223 378718168 - GPOL_c26700 - - ## 1437 1675937..1676344 - 135 378716993 - GPOL_c14660 - - ## 3556 4129253..4129675 - 140 378719112 - GPOL_c36230 - - ## 2975 3440776..3441603 + 275 378718531 - GPOL_c30390 - - ## 3302 3789968..3790504 + 178 378718858 - GPOL_c33690 - - ## 165 200572..203409 - 945 378715721 - GPOL_c01710 - - ## 776 933383..934402 + 339 378716332 galE GPOL_c07880 - - ## 2599 3013820..3015268 + 482 378718155 hpaIM GPOL_c26570 - - ## 572 691754..692611 + 285 378716128 - GPOL_c05820 - - ## 731 888637..889038 + 133 378716287 - GPOL_c07420 - - ## 1355 1575349..1578231 - 960 378716911 - GPOL_c13800 - - ## 1098 1282251..1283015 + 254 378716654 - GPOL_c11150 - - ## 1099 1283018..1283881 + 287 378716655 - GPOL_c11160 - - ## 3558 4130593..4131306 - 237 378719114 - GPOL_c36250 - - ## 1103 1287348..1288736 + 462 378716659 - GPOL_c11200 - - ## 171 209956..213609 - 1217 378715727 - GPOL_c01770 - - ## 1101 1284836..1286110 + 424 378716657 - GPOL_c11180 - - ## 181 227521..229344 + 607 378715737 - GPOL_c01870 - - ## 168 206837..208123 + 428 378715724 - GPOL_c01740 - - ## 1096 1279231..1280532 + 433 378716652 ugd1 GPOL_c11130 - - ## 1100 1283892..1284839 + 315 378716656 - GPOL_c11170 - - ## 1097 1280588..1282150 + 520 378716653 - GPOL_c11140 - - ## 1102 1286097..1287269 + 390 378716658 - GPOL_c11190 - - ## Product ## 3488 hypothetical protein ## 166 DNA (cytosine-5-)-methyltransferase ## 2762 hypothetical protein ## 3486 CRISPR-associated protein ## 359 putative NAD(P)H dehydrogenase (quinone) ## 364 hypothetical protein ## 161 putative endonuclease ## 1845 hypothetical protein ## 2486 2,3-dihydro-2,3-dihydroxybenzoate dehydrogenase DhbA ## 4820 putative transposase ## 358 HxlR family transcriptional regulator ## 3203 hypothetical protein ## 4351 putative phosphatase, PAP2 superfamily ## 162 hypothetical protein ## 3208 hypothetical protein ## 4352 hypothetical protein ## 2813 putative adenylate kinase ## 2459 alpha-ketoglutarate permease KgtP ## 2485 shikimate transporter ShiA ## 178 putative type III restriction protein res subunit ## 163 putative ATP-binding protein ## 686 hypothetical protein ## 3133 hypothetical protein ## 3201 hypothetical protein ## 2606 putative DNA primase/polymerase ## 3560 hypothetical protein ## 3559 hypothetical protein ## 2612 hypothetical protein ## 1437 hypothetical protein ## 3556 hypothetical protein ## 2975 hypothetical protein ## 3302 hypothetical protein ## 165 hypothetical protein ## 776 UDP-glucose 4-epimerase GalE ## 2599 methylase HpaI ## 572 hypothetical protein ## 731 hypothetical protein ## 1355 putative DNA methylase ## 1098 putative glycosyl transferase, WecB/TagA/CpsF family ## 1099 putative glycosyl transferase, family 2 ## 3558 hypothetical protein ## 1103 putative exopolysaccharide synthesis protein ## 171 hypothetical protein ## 1101 putative transmembrane protein ## 181 hypothetical protein ## 168 hypothetical protein ## 1096 UDP-glucose 6-dehydrogenase Ugd ## 1100 putative glycosyl transferase, family 2 ## 1097 O-antigen ligase-like protein ## 1102 putative acyltransferase head(gordo.ptt.red[order(scua.gp$co[,2]),],50) ## Location Strand Length PID Gene Synonym Code COG ## 695 854153..855100 - 315 378716251 - GPOL_c07050 - - ## 3942 4573559..4574206 + 215 378719498 - GPOL_c40140 - - ## 694 853467..854156 - 229 378716250 - GPOL_c07040 - - ## 1096 1279231..1280532 + 433 378716652 ugd1 GPOL_c11130 - - ## 1383 1612803..1613567 - 254 378716939 - GPOL_c14090 - - ## 2452 2848226..2848987 - 253 378718008 - GPOL_c25020 - - ## 1476 1721375..1721677 - 100 378717032 - GPOL_c15060 - - ## 155 182327..182704 - 125 378715711 - GPOL_c01610 - - ## 174 215161..215478 - 105 378715730 - GPOL_c01800 - - ## 3204 3674240..3674605 + 121 378718760 - GPOL_c32690 - - ## 1355 1575349..1578231 - 960 378716911 - GPOL_c13800 - - ## 2828 3280014..3281465 + 483 378718384 accD6 GPOL_c28880 - - ## 270 328945..329982 - 345 378715826 - GPOL_c02760 - - ## 3411 3909711..3911204 + 497 378718967 mmsA2 GPOL_c34780 - - ## 1437 1675937..1676344 - 135 378716993 - GPOL_c14660 - - ## 4820 5530951..5531469 - 172 378720376 - GPOL_c49050 - - ## 2135 2468307..2468903 - 198 378717691 - GPOL_c21820 - - ## 3348 3838794..3840626 + 610 378718904 - GPOL_c34150 - - ## 1097 1280588..1282150 + 520 378716653 - GPOL_c11140 - - ## 1105 1291411..1292346 + 311 378716661 - GPOL_c11220 - - ## 1090 1271798..1272802 - 334 378716646 rmlB2 GPOL_c11070 - - ## 171 209956..213609 - 1217 378715727 - GPOL_c01770 - - ## 817 971939..972244 - 101 378716373 - GPOL_c08290 - - ## 68 80611..80967 + 118 378715624 - GPOL_c00710 - - ## 2493 2891609..2892019 + 136 378718049 - GPOL_c25430 - - ## 2642 3059155..3060597 - 480 378718198 pyk GPOL_c27000 - - ## 3302 3789968..3790504 + 178 378718858 - GPOL_c33690 - - ## 4637 5331811..5332404 + 197 378720193 - GPOL_c47160 - - ## 2499 2898625..2899362 + 245 378718055 fabG3 GPOL_c25490 - - ## 168 206837..208123 + 428 378715724 - GPOL_c01740 - - ## 683 841838..842320 + 160 378716239 - GPOL_c06930 - - ## 4161 4815134..4816471 + 445 378719717 selA GPOL_c42370 - - ## 2516 2916614..2917192 + 192 378718072 - GPOL_c25680 - - ## 165 200572..203409 - 945 378715721 - GPOL_c01710 - - ## 151 179543..180016 - 157 378715707 - GPOL_c01570 - - ## 4140 4790706..4791008 + 100 378719696 - GPOL_c42150 - - ## 4394 5071891..5072295 + 134 378719950 - GPOL_c44710 - - ## 1786 2064579..2065346 + 255 378717342 - GPOL_c18170 - - ## 3519 4036069..4036575 + 168 378719075 - GPOL_c35860 - - ## 1658 1912498..1913283 - 261 378717214 mutM1 GPOL_c16880 - - ## 690 849383..850618 + 411 378716246 - GPOL_c07000 - - ## 1155 1355960..1356973 - 337 378716711 - GPOL_c11720 - - ## 216 265427..265744 - 105 378715772 - GPOL_c02220 - - ## 2974 3440418..3440795 + 125 378718530 - GPOL_c30380 - - ## 2599 3013820..3015268 + 482 378718155 hpaIM GPOL_c26570 - - ## 1927 2237844..2238371 - 175 378717483 ectA GPOL_c19670 - - ## 3646 4227944..4228312 + 122 378719202 - GPOL_c37130 - - ## 2457 2853612..2854379 + 255 378718013 - GPOL_c25070 - - ## 1947 2261345..2261800 + 151 378717503 rpsP GPOL_c19870 - - ## 1342 1563585..1564211 - 208 378716898 rplY GPOL_c13660 - - ## Product ## 695 hypothetical protein ## 3942 putative DNA-binding protein ## 694 hypothetical protein ## 1096 UDP-glucose 6-dehydrogenase Ugd ## 1383 succinyl-CoA:3-ketoacid-coenzyme A transferase, subunit A ## 2452 ATP-binding protein ## 1476 hypothetical protein ## 155 hypothetical protein ## 174 hypothetical protein ## 3204 hypothetical protein ## 1355 putative DNA methylase ## 2828 propionyl-CoA carboxylase beta chain 6 ## 270 putative ferredoxin oxidoreductase, NAD/FAD-binding protein ## 3411 methylmalonate-semialdehyde dehydrogenase MmsA ## 1437 hypothetical protein ## 4820 putative transposase ## 2135 hypothetical protein ## 3348 putative major facilitator superfamily transporter ## 1097 O-antigen ligase-like protein ## 1105 ABC transporter ATP-binding protein ## 1090 dTDP-glucose 4,6-dehydratase RmlB ## 171 hypothetical protein ## 817 hypothetical protein ## 68 hypothetical protein ## 2493 hypothetical protein ## 2642 pyruvate kinase Pyk ## 3302 hypothetical protein ## 4637 metal-dependent phosphohydrolase ## 2499 3-oxoacyl-ACP reductase ## 168 hypothetical protein ## 683 ferritin Dps family protein ## 4161 L-seryl-tRNA(sec) selenium transferase SelA ## 2516 TetR family transcriptional regulator ## 165 hypothetical protein ## 151 hypothetical protein ## 4140 hypothetical protein ## 4394 putative universal stress protein ## 1786 MerR family transcriptional regulator ## 3519 hypothetical protein ## 1658 formamidopyrimidine-DNA glycosylase MutM ## 690 CobW family protein ## 1155 hypothetical protein ## 216 ferredoxin ## 2974 hypothetical protein ## 2599 methylase HpaI ## 1927 L-2,4-diaminobutyric acid acetyltransferase EctA ## 3646 putative 4-carboxymuconolactone decarboxylase ## 2457 putative aminoglycoside phosphotransferase ## 1947 30S ribosomal protein S16 ## 1342 50S ribosomal protein L25 tail(gordo.ptt.red[order(scua.gp$co[,2]),],50) ## Location Strand Length PID Gene Synonym Code COG ## 2140 2472515..2472952 - 145 378717696 - GPOL_c21870 - - ## 3371 3862998..3863627 - 209 378718927 - GPOL_c34380 - - ## 2715 3148613..3150247 - 544 378718271 murC GPOL_c27730 - - ## 4134 4784534..4784971 - 145 378719690 - GPOL_c42090 - - ## 2714 3147915..3148613 - 232 378718270 ftsQ GPOL_c27720 - - ## 3561 4133298..4136522 - 1074 378719117 - GPOL_c36280 - - ## 509 617020..618411 + 463 378716065 - GPOL_c05190 - - ## 3712 4305588..4306838 - 416 378719268 - GPOL_c37790 - - ## 1294 1504742..1505182 + 146 378716850 - GPOL_c13180 - - ## 2220 2561671..2562186 + 171 378717776 ribH GPOL_c22670 - - ## 568 686020..687792 - 590 378716124 - GPOL_c05780 - - ## 2620 3037354..3037698 - 114 378718176 - GPOL_c26780 - - ## 1439 1677685..1678077 + 130 378716995 - GPOL_c14680 - - ## 1083 1262399..1262833 + 144 378716639 - GPOL_c11000 - - ## 382 449872..450495 + 207 378715938 - GPOL_c03900 - - ## 1292 1502280..1502816 + 178 378716848 - GPOL_c13160 - - ## 1515 1759229..1759597 + 122 378717071 - GPOL_c15450 - - ## 3501 4008803..4009222 - 139 378719057 - GPOL_c35680 - - ## 3335 3823317..3824726 - 469 378718891 gadB GPOL_c34020 - - ## 417 499207..502566 - 1119 378715973 - GPOL_c04250 - - ## 743 901431..901775 + 114 378716299 - GPOL_c07540 - - ## 125 146138..147358 - 406 378715681 - GPOL_c01310 - - ## 2717 3151608..3153497 - 629 378718273 ftsW GPOL_c27750 - - ## 2902 3367340..3368878 - 512 378718458 - GPOL_c29640 - - ## 2106 2438165..2438701 - 178 378717662 - GPOL_c21460 - - ## 1257 1469807..1470394 - 195 378716813 - GPOL_c12810 - - ## 2709 3143737..3144054 - 105 378718265 - GPOL_c27670 - - ## 2929 3395182..3396120 + 312 378718485 - GPOL_c29910 - - ## 4392 5069648..5070343 - 231 378719948 - GPOL_c44690 - - ## 719 877887..878654 + 255 378716275 - GPOL_c07300 - - ## 4158 4810942..4811340 - 132 378719714 - GPOL_c42330 - - ## 1977 2287149..2288321 + 390 378717533 dxr GPOL_c20170 - - ## 3568 4143153..4143572 - 139 378719124 - GPOL_c36350 - - ## 1728 1994561..1995391 + 276 378717284 - GPOL_c17580 - - ## 2716 3150319..3151536 - 405 378718272 murG GPOL_c27740 - - ## 1959 2268354..2269868 + 504 378717515 - GPOL_c19990 - - ## 685 844083..844451 + 122 378716241 - GPOL_c06950 - - ## 4089 4736337..4738070 - 577 378719645 - GPOL_c41620 - - ## 3557 4130067..4130474 - 135 378719113 - GPOL_c36240 - - ## 3558 4130593..4131306 - 237 378719114 - GPOL_c36250 - - ## 1958 2267978..2268334 + 118 378717514 - GPOL_c19980 - - ## 1727 1993634..1994554 + 306 378717283 - GPOL_c17570 - - ## 3556 4129253..4129675 - 140 378719112 - GPOL_c36230 - - ## 3208 3676631..3677539 - 302 378718764 - GPOL_c32730 - - ## 3202 3672909..3673310 - 133 378718758 - GPOL_c32670 - - ## 3560 4132594..4133019 - 141 378719116 - GPOL_c36270 - - ## 3207 3675837..3676472 - 211 378718763 - GPOL_c32720 - - ## 3201 3672553..3672918 - 121 378718757 - GPOL_c32660 - - ## 3559 4131657..4132082 - 141 378719115 - GPOL_c36260 - - ## 3203 3673484..3674278 - 264 378718759 - GPOL_c32680 - - ## Product ## 2140 hypothetical protein ## 3371 putative TetR family transcriptional regulator ## 2715 UDP-N-acetylmuramate--L-alanine ligase MurC ## 4134 hypothetical protein ## 2714 cell division protein FtsQ ## 3561 hypothetical protein ## 509 putative transporter ## 3712 ABC transporter ATP-binding protein ## 1294 hypothetical protein ## 2220 6,7-dimethyl-8-ribityllumazine synthase ## 568 putative transmembrane protein ## 2620 hypothetical protein ## 1439 hypothetical protein ## 1083 hypothetical protein ## 382 putative transmembrane protein ## 1292 hypothetical protein ## 1515 hypothetical protein ## 3501 hypothetical protein ## 3335 glutamate decarboxylase GadB ## 417 cell wall arabinan synthesis protein ## 743 hypothetical protein ## 125 putative major facilitator superfamily transporter transmembrane protein ## 2717 cell division protein FtsW ## 2902 ComEC/Rec2-like protein ## 2106 hypothetical protein ## 1257 putative transposase ## 2709 hypothetical protein ## 2929 NUDIX hydrolase ## 4392 putative GntR family transcriptional regulator ## 719 hypothetical protein ## 4158 putative endoribonuclease L-PSP ## 1977 1-deoxy-D-xylulose 5-phosphate reductoisomerase ## 3568 hypothetical protein ## 1728 putative ABC sugar transporter, permease component ## 2716 UDP-N-acetylglucosamine-N-acetylmuramyl- (pentapeptide) pyrophosphoryl-undecaprenol N- acetylglucosamine transferase ## 1959 Mg chelatase-like protein ## 685 ArsR family transcriptional regulator ## 4089 hypothetical protein ## 3557 hypothetical protein ## 3558 hypothetical protein ## 1958 hypothetical protein ## 1727 putative ABC sugar transporter, permease component ## 3556 hypothetical protein ## 3208 hypothetical protein ## 3202 hypothetical protein ## 3560 hypothetical protein ## 3207 hypothetical protein ## 3201 hypothetical protein ## 3559 hypothetical protein ## 3203 hypothetical protein par(mfrow = c(1,2)) s.label(scua.gp$co, clab = 0.6,lab=gordo.ptt.red$Gene) s.label(scua.gp$li, clab = 0.6) par(mfrow = c(1,1)) hist(scua.gp$co[,2],40) gordo.ptt.red[scua.gp$co[,2]&gt;0.5,] ## Location Strand Length PID Gene Synonym Code COG ## 685 844083..844451 + 122 378716241 - GPOL_c06950 - - ## 1727 1993634..1994554 + 306 378717283 - GPOL_c17570 - - ## 1958 2267978..2268334 + 118 378717514 - GPOL_c19980 - - ## 3201 3672553..3672918 - 121 378718757 - GPOL_c32660 - - ## 3202 3672909..3673310 - 133 378718758 - GPOL_c32670 - - ## 3203 3673484..3674278 - 264 378718759 - GPOL_c32680 - - ## 3207 3675837..3676472 - 211 378718763 - GPOL_c32720 - - ## 3208 3676631..3677539 - 302 378718764 - GPOL_c32730 - - ## 3556 4129253..4129675 - 140 378719112 - GPOL_c36230 - - ## 3557 4130067..4130474 - 135 378719113 - GPOL_c36240 - - ## 3558 4130593..4131306 - 237 378719114 - GPOL_c36250 - - ## 3559 4131657..4132082 - 141 378719115 - GPOL_c36260 - - ## 3560 4132594..4133019 - 141 378719116 - GPOL_c36270 - - ## 4089 4736337..4738070 - 577 378719645 - GPOL_c41620 - - ## Product ## 685 ArsR family transcriptional regulator ## 1727 putative ABC sugar transporter, permease component ## 1958 hypothetical protein ## 3201 hypothetical protein ## 3202 hypothetical protein ## 3203 hypothetical protein ## 3207 hypothetical protein ## 3208 hypothetical protein ## 3556 hypothetical protein ## 3557 hypothetical protein ## 3558 hypothetical protein ## 3559 hypothetical protein ## 3560 hypothetical protein ## 4089 hypothetical protein #################################################################### # # Investigamos finalmente si existe relación entre el CAI y la # posición del gen a lo largo del cromosoma. ¿Como se relaciona lo # que observas con GCskew? # #################################################################### plot(cai.gp, main = &quot;Gordonia polyisoprenivorans VH2&quot;,xlab=&quot;Posicion Gen&quot;,ylab=&quot;CAI&quot;,cex=0.3) lines(lowess(cai.gp,f=.1), col = 2,lwd=1.5) lines(lowess(cai.gp, f=.02), col = 3,lwd=1.5) legend(100, 0.3, c(paste(&quot;f = &quot;, c(&quot;0.1&quot;, &quot;.02&quot;))), lty = 1, col = 2:3) El contenido GC se calcula usualmente como \\(GC=(N_C+N_G)/(N_A+N_C+N_G+N_T)\\), donde \\(N_A\\)...\\(N_T\\) corresponde al número de veces que aparece cada base en una secuencia.↩︎ El \\(GC_{skew}\\) se calcula tomando una ventana de tamaño determinado y de acuerdo con la siguiente expresión: \\(GC_{skew}=(N_G-N_C)/(N_G+N_C)\\).↩︎ "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
